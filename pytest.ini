[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    slow: Slow running tests
    memory: Memory profiling tests
    benchmark: Performance benchmark tests
    config: Configuration tests
    base: Base class tests
    models: Model tests
    portfolio: Portfolio optimization tests
    backtesting: Backtesting tests

# Test execution
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test configuration
[tool:pytest.ini_options]
minversion = 6.0
addopts = -ra -q --strict-markers
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "memory: Memory profiling tests",
    "benchmark: Performance benchmark tests",
    "config: Configuration tests",
    "base: Base class tests",
    "models: Model tests",
    "portfolio: Portfolio optimization tests",
    "backtesting: Backtesting tests"
]
